use program::posix::ast;
use program::ast::Interpreter;

grammar;

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "\n" => lexer::Tok::Newline,
        ";"  => lexer::Tok::Newline,
        "&"  => lexer::Tok::Amper,
        "{"  => lexer::Tok::RBrace,
        "}"  => lexer::Tok::LBrace,
        "!"  => lexer::Tok::Bang,
        "|"  => lexer::Tok::Pipe,
        "&&" => lexer::Tok::And,
        "||" => lexer::Tok::Or,
        "#!" => lexer::Tok::Shebang,
    }
}

pub Program: ast::Program = {
    // TODO #8: We need our own lexer to make this rule work.
    // <p: Program> "\n"+ <c: Commands> => {
    //     p.push(box c.clone());
    // },
    Complete => <>,
}

Complete: ast::Program = {
    <l: List> ";" => l,
    <l: List> "&" => {
        let bg = ast::Command::Background(box l);
        ast::Program(vec![box bg])
    },
    List => <>,
}

List: ast::Program = {
    <l: List> ";" <cs: Commands> => {
        l.push(box cs.clone())
    },
    <l: List> "&" <cs: Commands> => {
        let bg = ast::Command::Background(box l);
        ast::Program(vec![box bg, box cs])
    },
    Commands => {
        ast::Program(vec![box <>])
    },
}

Compound: ast::Program = {
    <cs: Commands> ";" <c: Compound> => {
        c.insert(box cs.clone())
    },
    <cs: Commands> ";" => {
        ast::Program(vec![box cs])
    },
}

Commands: ast::Command = {
    // TODO #15: Hopefully in fixing #8 and #10 this can play nicely.
    // NOTE: This can be successfully complied, but will break a doc tests.
    "{#!" <i: Word+> ";" <t: Word*> "}" => {
        let i = i.into_iter().map(|w| w.0).collect::<Vec<String>>().join(" ");
        let t = t.into_iter().map(|w| w.0).collect::<Vec<String>>().join(" ");
        let b = ast::BridgedProgram(Interpreter::Other(i), t);
        ast::Command::Bridgeshell(box b)
    },
    "(" <p: Program> ")" => {
        ast::Command::Subshell(box p)
    },
    "{" <c: Compound> "}" => {
        ast::Command::Compound(box c)
    },
    <cs: Commands> "&&" <p: Pipeline> => {
        ast::Command::And(box cs, box p)
    },
    <cs: Commands> "||" <p: Pipeline> => {
        ast::Command::Or(box cs, box p)
    },
    Pipeline => <>,
}

Pipeline: ast::Command = {
    "!" <ps: PipelineSeq> => {
        ast::Command::Not(box ps)
    },
    <ps: PipelineSeq> => ps,
}

PipelineSeq: ast::Command = {
    <ps: PipelineSeq> "|" "\n"* <c: Command> => {
        ast::Command::Pipeline(box ps, box c)
    },
    <c: Command> => c,
}

// TODO #8: We *really* need a custom lexer so we can split this
// on something.
Command: ast::Command = Word+ => {
    ast::Command::Simple(<>)
};

// TODO #8: Custom lexer plus proger rules needed.
Word: ast::Word = r#"[a-zA-Z0-9-_=\.:/"'#$\(\)]+"# => {
    ast::Word(<>.into())
};
